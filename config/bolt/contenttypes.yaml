# This file defines the content types on the website. See the documentation for
# details: https://docs.bolt.cm/contenttypes/intro

# The Homepage content type is a singleton: There can be only one record of this
# content type.

homepage:
    name: Homepage
    singular_name: Homepage
    fields:
        heroimage:
            type: image
            label: "Image d'entête"
            group: "Entête"
        title:
            type: text
            class: large
            group: "Entête"
            localize: true
            label: "Titre"
            postfix: |
                The 'Homepage' can contain basic information about the website. This title will be
                shown on the homepage of the website, as the name implies. To change the
                <em><strong>name</strong></em> of the site, as is shown in the header, and the tab
                in the webbrowser, edit <code>sitename:</code> in the configuration file.
            groupe: "Entête"
        image:
            type: image
            label: "logo"
            group: "Entête"
        introduction:
            type: redactor
            localize: true
            group: "Entête"
            label: "Texte"
        intro_content:
            type: article
            label: "Section d'Introduction"
            localize: true
            group: "Introduction"
        section_tarif:
            label: "Section Tarifs"
            type: article
            localize: true
            group: "Tarifs et Info Pratique"
        section_contact:
            label: "Section Contact"
            type: article
            localize: true
            group: "Section Contact"
        sponsors:
            type: collection
            label: Partenaires
            group: Partenaires
            fields:
                sponsor:
                    type: set
                    label: Partenaire
                    fields:
                        title:
                            type: text
                            label: Nom
                        logo:
                            type: image
                            label: Logo
                        link:
                            type: text
                            label: lien
        slug:
            type: slug
            uses: title
            group: Meta
    viewless: false
    taxonomy: [ categories, tags, foobars ]
    locales: ['fr', 'en', 'de']
    singleton: true
    icon_many: "fa:home"
    icon_one: "fa:home"


# Pages can be used for the more 'static' pages on your site. This content-type
# has a 'templateselect' field, which allows you to override the record_template
# setting for an individual page.
# The taxonomy for this ContentType is defined as 'groups', which is a so-called
# "grouping taxonomy". This way you can easily group sets of pages that logically
# belong together. If your site has a 'services' section, in which you'd like to
# list the different types of services a company provides, you can group these
# together.

pages:
    name: Pages
    singular_name: Page
    fields:
        title:
            type: text
            class: large
            group: content
            localize: true
        teaser:
            label: Phrase d'accroche
            type: textarea
            postfix: |
                Phrase d'accroche utilisé pour le référencement ou pour partager la page sur les réseaux sociaux
            localize: true
        image:
            label: "Image d'entête, de présentation de la page"
            type: image
        body:
            label: Corps et contenu de la page (WISIWIG)
            type: article
            localize: true
        slug:
            type: slug
            uses: title
            group: Meta
            localize: true
        template:
            type: templateselect
            filter: '/^[^_].*\.twig$/'
    locales: ['fr', 'en', 'de']
    records_per_page: 5
    order: id

# The 'Blocks' ContentType is a so-called 'resource ContentType'. This means
# that it can be used to manage smaller pieces of content, like the 'about us'
# text, an 'our address' in the footer, or similar short blurbs of text.
# For more info, see: https://docs.bolt.cm/howto/resource-contenttype

blocks:
    name: Blocks
    singular_name: Block
    excerpt_format: '{teaser}'
    fields:
        title:
            type: text
            class: large
            label: Titre du Block
        content:
            type: article
            localize: true
    show_on_dashboard: true
    locales: ['fr', 'en', 'de']
    viewless: true
    default_status: published
    searchable: false
    order: title
    icon_many: "fa:cubes"
    icon_one: "fa:cube"




# Possible field types:
#
# text - varchar(256) - input type text.
# number - double - Input field for numbers, with `mode: integer` or `mode: float`
# imagelist - text (65kb) - Input type for imagelists. Add multiple images. Useful for image sliders, galleries, etcetera.
# image - varchar(256) - image select/upload widget, stored as filename.
# file - varchar(256) - file select/upload widget, stored as filename.
# filelist - text (65kb) - Input type for a list of files. Including a description.
# embed - text (65kb) - embed widget for video and audio. Stored as JSON.
# html - text (65kb) - wysiwyg element.
# textarea - varchar(32768) - Simple, plain < textarea > field.
# markdown - varchar(32768) - wysiwyg element, which is parsed as Markdown text.
# date - datetime - date selector widget, with `mode: date` or `mode: datetime`
# email - text(65kb) - Input type for email.
# select - varchar(256) - select with predefined values
# templateselect - varchar(256) - select with template filenames
# checkbox - integer - checkbox-field which is 1 (checked) or 0 (unchecked)
# set - text (65kb) - Input type for sests. Group fields semantically into a combined set field.
# collection - text (65kb) - Input type for collections. Add multiple fields of different types. Useful for lists.
# data - text (65kb) - Read-only field, useful for storing (raw) data provided by an external source.
# hidden - text (65kb) - Regular text field, except it is hidden from the content editor.
# slug - text(65kb) - The slug for the record. Use with option `uses: [ title ]` to generate based on a title field.

# Using YAML repeated nodes
#
# YAML allows the defining of "repeated nodes". These allow you to define a 'node'
# with a 'key: &name' and referenced later with '<<: *name'
#
# Bolt allows you to define this with the special entry of '__nodes:' that itself
# won't create a ContentType, but will allow you to use it in actual ContentTypes
# to prevent repeating yourself.
#
# To achieve this, first create a key '__nodes:' and place it before your other contenttypes:
#__nodes:
#    field_defaults: &field_defaults
#        title:
#            type: text
#            class: large
#            group: main
#        slug:
#            type: slug
#            uses: title
#    template_defaults: &template_defaults
#        template:
#            type: templateselect
#            filter: '*.twig'
#            group: meta
#
# Then, as an example, you could create a ContentType with default fields, with
# an additional 'image' field.
#
#contenttypeabc:
#    name: ContentType Abc
#    slug: contenttypeabc
#    fields:
#        <<: *field_defaults
#        image:
#            type: image
#            attrib: title
#            extensions: [ gif, jpg, png ]
#        <<: *template_defaults
#    taxonomy: [ chapters ]
#    records_per_page: 10
#
# Alternatively, or additionally, you then can then create a ContentType with
# default fields, and a 'select' field, and a different 'templateselect' option.
#
#contenttypexyz:
#    name: ContentType Xyz
#    slug: contenttypexyz
#    fields:
#        <<: *field_defaults
#        selectfield:
#            type: select
#            values: [ none, foo, bar ]
#        template:
#            type: templateselect
#            filter: '*_xyz.twig'
#    taxonomy: [ tags ]
#    records_per_page: 20
